Denne oppgaven er laget av Even S. Hvinden og oppdatert av Derek J. Clark. Sistnevnte er ansvarlig for eventuelle feil og mangler.

## Instruksjoner

Denne oppgaven skal løses interaktivt i RStudio ved å legge inn egen kode og kommentarer. Det ferdige dokumentet lagres med kandidatnummeret som navn `[kandidatnummer]_SOK1004_C1_H23.qmd` og lastes opp på deres GitHub-side. Hvis du har kandidatnummer 43, så vil filen hete `43_SOK1004_C1_H23.qmd`. Påse at koden kjører og at dere kan eksportere besvarelsen til pdf. Dere leverer lenken til GitHub-repositoriumet i Canvas (under oppgaver).

## Bakgrunn

Vi skal analysere utviklingen i bruttonasjonalprodukt (BNP) per person i Norge. Vi bruker data Statistisk Sentralbyrå (SSB), tabell "09842: BNP og andre hovedstørrelser (kr per innbygger), etter statistikkvariabel og år". Tabellen inneholder årlige data på BNP per innbygger, fra 1970 til 2022.

## I. API, visualisering

SSB gir oss tilgang til sine data via en [API](https://www.ssb.no/omssb/tjenester-og-verktoy/api) (*Application Programming Interface*), programvare som lar to applikasjoner kommunisere med hverandre. SSB tilbyr en API med [ferdige datasett](https://data.ssb.no/api/v0/dataset/). Her er det om lag 250 kontinuerlig oppdaterte datasett med en fast URL over de mest brukte tabellene i Statistikkbanken.

For å få tilgang til tabellen med bruttonasjonalprodukt må vi benytte tjenesten [PxWebApi](https://www.ssb.no/omssb/tjenester-og-verktoy/api/px-api). Her finner du en [API konsoll](https://data.ssb.no/api/v0/no/console/) med en søkefunksjon. Prøv å søk på "`bnp`" og merk forslaget: tabell 09842. Søk på denne, og noter URL-en. Den vil vi bruke etterpå.

Til å laste ned dataene skal vi bruke en R-pakke, [PxWebApiData](https://cran.r-project.org/web/packages/PxWebApiData/index.html), som SSB har laget. I første omgang skal vi bruke funksjonen `ApiData()`. Syntaksen er ikke den samme som i `tidyverse`, og har noen litt uvante egenskaper, herunder lagring i tegnformat og en kombinasjon av norsk og engelsk.

**Tips:** Det er typisk instruktivt å se på [eksempel på bruk](https://cran.r-project.org/web/packages/PxWebApiData/vignettes/Introduction.html). Da har man et intuitivt utgangspunkt for hvordan koden kan brukes.

Jeg vil nå vise dere trinnvis hvordan å laste ned dataene. Formålet er å gi dere en idé på hvordan man kan lære seg å bruke en ny pakke eller funksjon. Vi begynner med å laste inn nødvendige pakker:

```{r}
rm(list=ls())
library(tidyverse)
library(PxWebApiData)
```

**NB!** Du må installere `PxWebApiData` først. Kjør kommandoen `install.packages("PxWebApiData")` i konsollen. Det må kun gjøres én gang.

Vi bruker funksjonen `ApiData()` til å hente tabell 09842. Som notert ovenfor fant vi URL-en ved hjelp av søkefunksjonen til SSB. Først prøver vi å laste ned dataene direkte, uten ytterligere tilvalg, og tar en titt på hva vi får.

```{r}
lenke <- "http://data.ssb.no/api/v0/no/table/09842"

df <- lenke %>%
  ApiData()

df %>%
  print()
```

**Merk følgende:** `df` inneholder to datasett i formatet `data.frame`. Datasettene heter `"09842: BNP og andre hovedstørrelser (kr per innbygger), etter statistikkvariabel og år"` og `dataset`. Datasettene inneholder 9 verdier av 3 variabler. Variabelen `value` er identisk. Variablene `år` og `Tid` inneholder de identiske verdiene `"1970"`, `"2021"` og `"2022"`. Merk at disse er i tegnformat `<chr>` (derav anførselstegnene) og ikke en numerisk verdi, for eksempel `<dbl>`. Variabelen `statistikkvariabel` og `ContentsCode` inneholder henholdsvis verdiene `BNP`, `KonsumHIO` `MEMOBNP` og `Bruttonasjonalprodukt, Konsum i husholdninger og ideelle organisasjoner` og `MEMO: Bruttonasjonalprodukt. Faste 2015-priser`.

Vi har altså ikke fått hele tabell 09842, men verdiene for tre statistikkvariabler over tre tidsperioder, lagret med forskjellige variabelnavn og verdier.

Det vi trenger er **metadata**: Informasjon som beskriver innholdet i dataene, slik at vi kan filtrere API-spørringen. Kjør følgende kode.

```{r}
metadata <- lenke %>%
  ApiData(returnMetaData = TRUE)
```

Åpner vi listen `metadata` fra minnet så kan vi se nærmere på den i øvre venstre vindu i Rstudio. Her ser vi to lister kalt `[[1]]` og `[[2]]`. Listene beskriver variablene vi kan filtrere på. Liste `[[1]]` har fire variable: `code`, `text`, `values`, og `valueTexts`. Alle variablene er `<chr>`. Liste `[[2]]` har de samme foregående fire variablene samt en variabel `time`.

-   `code` viser navnene på variablene vi bruker i funksjonen `ApiData()` for å filtrere. Den tar verdiene `ContentsCode` og `Tid`. Legg merke til at utviklerne i SSB her blander norsk og engelsk.

-   `text` er en unik tekstverdi tilknyttet verdien på `code` som forklarer hva vi ser på. Den tar verdien `statistikkvariabel` og `år`. Vi kan altså filtrere på statistikkvariabel og år.

-   `values` viser hvilke verdier av statistikkvariabel og år vi kan velge, med henholdsvis 6 og 53 forskjellige verdier. Du vil kjenne igjen tre av hver fra den første spørringen ovenfor.

-   `valueTexts` gir en unik tekstverdi tilknyttet verdien på `values` som forklarer oss hva vi ser på. For `Tid` og `år` er de identiske, men for `ContentsCode` og `statistikkvariabel` får vi en mer fullstendig forklaring.

-   `time` er en logisk variabel, og tar derfor to verdier: `TRUE` og `FALSE`. I dette tilfellet indikerer den at variabelen `Tid` måler tid, hvilket gjør at funksjonene i pakken vil behandle `Tid` på en annen måte enn en statistikkvariabel.

Vi har nå informasjonen vi trenger til å laste ned BNP-tall mellom 1970 og 2022. Jeg velger å ta BNP med både løpende og faste priser.

```{r}
df <- lenke %>% 
  ApiData(Tid = paste(1970:2022), ContentsCode = c("BNP","MEMOBNP"))
```

På venstre side av likhetstegnet bruker vi `code` fra metadata. På høyre side velger vi verdier fra `values`. Merk at jeg bruker funksjonen `paste()` for å konvertere numeriske verdier, for eksempel `<dbl>` til tegn `<chr>`.

La oss rydde i data. Det er tre ting å ta tak i:

1.  `df` lagrer informasjonen i to tabeller med samme informasjon, som vist over. Det er unødvendig.

2.  Årstallene er lagret som tegn, `<chr>`. Disse skulle heller være heltall, `<int>`.

3.  Formatet `data.frame` er underlegent `tibble`.

### Oppgave Ia: Rydd i data

Skriv kode som lagrer dataene som én tibble med anstendige variabelnavn og årstall som heltall. Fremover bruker jeg "var", "tid", og "verdi" for "statistikkvariabel", "Tid", og "value".

```{r}
# Oppgave Ia løses her 
df <- df[["dataset"]]

df$Tid <- as.integer(df$Tid)

df <- df %>% 
  rename(var = ContentsCode, 
         tid = Tid, 
         verdi = value) %>% 
  as_tibble()

```

### Oppgave Ib: Lag en figur

Følgende kode skaper en enkel figur.

```{r}
df %>%
  filter(var == "BNP") %>%
  ggplot(aes(x=tid,y=verdi)) +
  geom_line()
```

Lag en pen figur som viser BNP i tusener av kroner per person, i både løpende og faste priser, mellom 2000 og 2022. Skriv en tydelig forklaring og tolkning av figuren. Hvordan har inntektene utviklet seg? Forklar forskjellen mellom BNP i løpende og faste priser. Til hvilke formål er de mest relevante?

```{r}
# Oppgave Ib løses her 
df %>% 
  filter(tid > 2000, 
         tid < 2022) %>% 
  ggplot(aes(x = tid, y = verdi, color = var)) +
  geom_line() +
  scale_y_continuous(labels = scales::unit_format(unit = "kr")) +
  labs(title = "Bruttonasjonaltprodukt per innbygger", subtitle = "Utvikling mellom årene 2000 - 2022", x = "", y = "") +
  scale_color_manual(values = c("#FF61CC", "#00A9FF"), 
                    name = "Måleenhet", 
                    breaks = c("BNP", "MEMOBNP"),
                    labels = c("Flytende priser", 
                                "Faste priser (2015)")) + 
  theme_classic() +
  theme(plot.title = element_text(face="bold", size=15), 
        plot.subtitle = element_text(size=12), 
        legend.position = "right", 
        legend.title = element_text(face="bold", size=12), 
        legend.text = element_text(size=8), 
        axis.title.y = element_text(face="bold", size=12), 
        axis.text.y = element_text(size=8), 
        axis.text.x = element_text(face ="bold", size=8))

```

*\[Figuren ovenfor gir oversikt over utviklingen i nominelt og reelt BNP per innbygger. BNP per innbygger målt i NOK vises på den vertikale aksen og år vises på den horisontale aksen. Figuren viser sterk positiv utvikling for BNP målt i flytende priser (nominelt). For BNP målt i faste priser (reelt) observeres også vekst mellom årene 2000 - 2020. Derimot er utviklingen betydelig jevnere med mindre variasjon. BNP målt i flytende priser innebærer å bruke de faktiske prisene som er gjeldende for det året BNP beregnes.  Dermed er utviklingen i nominelt BNP sterkt påvirket av endringer i inflasjon og pengeverdi. Anvendelse av BNP målt i flytende priser er derfor hensiktsmessig i tilfeller der en ønsker å se på økonomisk vekst over en svært kort periode. Når BNP måles i faste priser derimot tas det utgangspunkt i prisene fra et bestemt år (år 2015 i dette tilfellet). Dermed når utviklingen i BNP studeres på et aggregert nivå, vil verdien av BNP være justert for inflasjons - og pengeverdiendringer, hvilket gjør at det kun er produksjonsutviklingen som vises. Denne måten å måle BNP på, er av den mest brukte da den reflekterer landets kjøpekraft og mer nøyaktig beskriver utviklingen i produksjonen, og er dermed godt egnet for å analysere en økonomi sin langsiktige økonomiske vekst, samt sammenligne forskjellige lands økonomiske utvikling.\]*

## II. Transformasjon, visualisering

Våre data er en tidsserie, hvilket betyr at rekkefølgen i observasjonene er ordnet etter tid. Vi skal nå regne prosentvis, årlig endring. La $x_t$ være BNP i år $t$. For eksempel vil $x_{1970}$ være $23616$.

Den årlige endringen i BNP fra år $t-1$ til $t$ er gitt ved $x_{t}-x_{t-1}$. I samfunnsøkonomi er det vanlig å betegne dette som $\Delta x_{t} := x_{t}-x_{t-1}$. Tegnet $\Delta$ er den greske bokstaven delta og betegner differanse. For eksempel vil $\Delta x_{1971}=26363-23616=2747$ kroner.

I mange tilfeller er vi interesserte i relativ vekst: Hvor mye økte BNP, relativt til hva den var i utgangspunkt? Den mest brukte enheten er hundredeler eller prosentvis endring, gitt ved $100 \times \Delta x_{t}/x_{t-1}$. For eksempel var den prosentvise endringen i BNP i 1971 $100 \times \Delta x_{1971}/x_{1970}=100\times(2747/23616)\approx11.6$, hvor $\approx$ betegner "omtrent lik" da jeg viser svaret med kun én desimal. Tilsvarende kan man skrive at $\Delta x_{1971}/x_{1970}=2747/23616\approx0.116=11.6\%$, hvor tegnet $\%$ betegner at beløpet oppgis i hundredeler eller prosent.

## Oppgave IIa: Omorganisere datasett med `pivot_wider()`

Vi skal lage to variable `dBNP` og `dMEMOBNP` som viser relativ endring i `BNP` og `MEMOBNP`. Til dette formålet skal vi bruke kommandoene `pivot_wide()` og `pivot_long()` til å omorganisere dataene. Jeg anbefaler dere først å lese [kapittel 12.3](https://r4ds.had.co.nz/tidy-data.html#pivoting) i pensum. Betrakt følgende kode.

```{r}
df_wide <- df %>%
  pivot_wider(names_from = var, values_from = verdi) 
```

Beskriv konkret hva koden gjorde. Sammenlign `df` og `df_wide`.

*\[Koden ovenfor omgjorde datasettet fra å være i et "long" format til å nå være i et "wide" format, ved å bruke kommandoen `pivot_wider()`. I kommandoen settes "names_from" til "var", hvilket informerer om fra hvilken kolonne/variabel de nye variablene skal hentes fra. Deretter settes "values_from" til "verdi", for å informere om hvilken kolonne/variabel som inneholder verdiene til de nye variablene. Det opprinnelige datasettet `df` består av en kategorisk variabel `var` som identifiserer to kategorier BNP og MEMOBNP, en tidsvariabel `tid` og en kontinuerlig variabel `verdi` som inneholder den kvantitative verdien til BNP og MEMOBNP. I dette datasettet er de to kategoriene stablet oppå hverandre. Dermed inneholder datasettet to rader per år, hvilket gjør at datasettet er langt. I det nye datasettet `df_wide` er det ikke lenger en kategoriske variabel. I stedet identifiseres BNP og MEMOBNP som to separate kontinuerlige variabler og inneholder verdiene hentet fra variabelen `verdi`. I det nye datasettet fordeles de to observasjonene per år, på to kolonner, i stedet for på to rader. Dermed halveres lengden på datasettet og datasettet blir ofte viere (avhengig antall kategorier den kategoriske variabelen inneholder).\]*

## Oppgave IIb: Beregn vekst

Til å beregne endring er funksjonen `lag()` meget nyttig. I denne konteksten er begrepet *lag* et engelsk verb som beskriver foregående observasjon. Bruker vi funksjonen `lag()` på en variabel (kolonne) så returnerer den en ny kolonne hvor verdien er lik foregående observasjon. Betrakt følgende kode:

```{r}
df_wide <- df_wide %>%
  mutate(LBNP = lag(BNP,n=1L)) %>%
  mutate(LMEMOBNP = lag(MEMOBNP,n=1L))

# legger variablene i rekkefølge

df_wide <- df_wide %>%
  relocate("LBNP", .before = "MEMOBNP")

df_wide
```

Hvis vi bruker den matematiske notasjonen diskutert tidligere så har vi nå kolonner med $x_{t}$ (`BNP`, `MEMOBNP`) og $x_{t-1}$ (`LBNP`, `LMEMOBNP`).

Bruk funksjonen `mutate()` til å lage en ny variabel med relativ endring i `BNP` og `MEMOBNP` i `df_wide` og lagre de som `DBNP` og `DMEMOBNP`.

```{r}
# Besvar oppgave IIb her 
df_wide <- df_wide %>% 
  mutate(DBNP = ((BNP - LBNP)/LBNP)*100, 
         DMEMOBNP = ((MEMOBNP - LMEMOBNP)/LMEMOBNP)*100)
```

## Oppgave IIc: Omorganisere datasett med `pivot_longer()`

Bruk nå funksjonen `pivot_longer()` til å transformere `df_wide` til det opprinnelige formatet, altså med variablene `var` og `verdi`. Kall den transformerte tabellen for `df_long`.

**NB!** Husk å bruk anførselstegn (`"[variabelnavn]"`) når du definerer nye variable i `pivot_longer()`.

```{r}
# Besvar oppgave IIc 
df_long <- df_wide %>% 
  pivot_longer(cols = c(BNP, MEMOBNP, LBNP, LMEMOBNP, DBNP, DMEMOBNP),
               names_to = "var", values_to = "verdi")
```

## Oppgave IId: Figur med vekst

Lag en pen figur med prosentvis vekst i nominelt og reelt BNP per person fra 1970 til 2022. Finnes det observasjoner med negativ vekst i reell BNP? Hva skyldes dette?

**Merknad:** Det er en del støy i data. Prøv å kombinere `geom_point()` og `geom_smooth()` for å få et bedre inntrykk av den langsiktige utviklingen.

```{r}
# Besvar oppgave IId her
df_long %>% 
  filter(var == c("DBNP", "DMEMOBNP")) %>% 
  mutate(vekst = if_else(condition = verdi >= 0, 
                         true = "positiv", 
                         false = "negativ")) %>% 
  ggplot(aes(x = tid, y = verdi, color = var)) +
  geom_point(aes(alpha = vekst)) + 
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Relativ vekst i nominelt og reelt BNP per innbygger", 
       y = "", x = "") +
  scale_y_continuous(labels = scales::unit_format(unit = "%")) +
  scale_color_manual(values = c("#FF61CC", "#00A9FF"), 
                    name = "Måleenhet", 
                    breaks = c("DBNP", "DMEMOBNP"),
                    labels = c("Nominelt BNP", 
                                "Reelt BNP")) + 
  scale_alpha_manual(values = c(1, 0.3), 
                     name = "", 
                     breaks = c("positiv", "negativ"), 
                     labels = c("positiv vekst", "negativ vekst")) +
  #geom_hline(yintercept = 0, linetype = "dashed") +
  theme_classic() +
  theme(plot.title = element_text(face="bold", size=12), 
        legend.position = "right", 
        legend.title = element_text(face="bold", size=12), 
        legend.text = element_text(size=8), 
        axis.text.y = element_text(size=8), 
        axis.text.x = element_text(size=8))
  
```

*\[I figuren ovenfor observeres flere tilfeller med negativ vekst i reelt BNP, illustrert ved de blå transperante prikkene.  Årsakene til negativ vekst i reelt BNP skyldes trolig redusert konsum og investeringer forårskaet av bankkrisen (1988), finanskrisen (2008 - 2010), ettervirkninger av finanskrisen (2011, 2013) og covid19 pandemien (2020). Andre årsaker kan være oljeprisfall eller ster kronekurs, som påvirker eksportsektoren.\]*

```{r}
df_long %>% 
  filter(var == "DMEMOBNP", verdi < 0)
```



